/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace IClearing {
  export type OrderStruct = {
    offerer: AddressLike;
    inputToken: AddressLike;
    inputAmount: BigNumberish;
    outputToken: AddressLike;
    outputAmount: BigNumberish;
    recipient: AddressLike;
    zone: AddressLike;
    chainId: BigNumberish;
    startTime: BigNumberish;
    endTime: BigNumberish;
    toWithdraw: boolean;
  };

  export type OrderStructOutput = [
    offerer: string,
    inputToken: string,
    inputAmount: bigint,
    outputToken: string,
    outputAmount: bigint,
    recipient: string,
    zone: string,
    chainId: bigint,
    startTime: bigint,
    endTime: bigint,
    toWithdraw: boolean
  ] & {
    offerer: string;
    inputToken: string;
    inputAmount: bigint;
    outputToken: string;
    outputAmount: bigint;
    recipient: string;
    zone: string;
    chainId: bigint;
    startTime: bigint;
    endTime: bigint;
    toWithdraw: boolean;
  };

  export type SignedOrderStruct = {
    order: IClearing.OrderStruct;
    extraData: BytesLike;
    signature: BytesLike;
  };

  export type SignedOrderStructOutput = [
    order: IClearing.OrderStructOutput,
    extraData: string,
    signature: string
  ] & {
    order: IClearing.OrderStructOutput;
    extraData: string;
    signature: string;
  };
}

export interface PrincipalMatchInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "clearing"
      | "handleDeposit"
      | "handleSettlement"
      | "manager"
      | "name"
      | "setNewManager"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "TradeSettled"): EventFragment;

  encodeFunctionData(functionFragment: "clearing", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "handleDeposit",
    values: [AddressLike, AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "handleSettlement",
    values: [IClearing.SignedOrderStruct[], BytesLike, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "manager", values?: undefined): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setNewManager",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(functionFragment: "clearing", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "handleDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "handleSettlement",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "manager", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setNewManager",
    data: BytesLike
  ): Result;
}

export namespace TradeSettledEvent {
  export type InputTuple = [tradeId: string];
  export type OutputTuple = [tradeId: string];
  export interface OutputObject {
    tradeId: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface PrincipalMatch extends BaseContract {
  connect(runner?: ContractRunner | null): PrincipalMatch;
  waitForDeployment(): Promise<this>;

  interface: PrincipalMatchInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  clearing: TypedContractMethod<[], [string], "view">;

  handleDeposit: TypedContractMethod<
    [
      from: AddressLike,
      token: AddressLike,
      amount: BigNumberish,
      extraData: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  handleSettlement: TypedContractMethod<
    [
      orders: IClearing.SignedOrderStruct[],
      extraData: BytesLike,
      witness: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  manager: TypedContractMethod<[], [string], "view">;

  name: TypedContractMethod<[], [string], "view">;

  setNewManager: TypedContractMethod<
    [_newManager: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "clearing"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "handleDeposit"
  ): TypedContractMethod<
    [
      from: AddressLike,
      token: AddressLike,
      amount: BigNumberish,
      extraData: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "handleSettlement"
  ): TypedContractMethod<
    [
      orders: IClearing.SignedOrderStruct[],
      extraData: BytesLike,
      witness: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "manager"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "name"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "setNewManager"
  ): TypedContractMethod<[_newManager: AddressLike], [void], "nonpayable">;

  getEvent(
    key: "TradeSettled"
  ): TypedContractEvent<
    TradeSettledEvent.InputTuple,
    TradeSettledEvent.OutputTuple,
    TradeSettledEvent.OutputObject
  >;

  filters: {
    "TradeSettled(string)": TypedContractEvent<
      TradeSettledEvent.InputTuple,
      TradeSettledEvent.OutputTuple,
      TradeSettledEvent.OutputObject
    >;
    TradeSettled: TypedContractEvent<
      TradeSettledEvent.InputTuple,
      TradeSettledEvent.OutputTuple,
      TradeSettledEvent.OutputObject
    >;
  };
}
