/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace IAoriV2 {
  export type OrderStruct = {
    offerer: AddressLike;
    inputToken: AddressLike;
    inputAmount: BigNumberish;
    outputToken: AddressLike;
    outputAmount: BigNumberish;
    recipient: AddressLike;
    zone: AddressLike;
    chainId: BigNumberish;
    startTime: BigNumberish;
    endTime: BigNumberish;
    toWithdraw: boolean;
  };

  export type OrderStructOutput = [
    offerer: string,
    inputToken: string,
    inputAmount: bigint,
    outputToken: string,
    outputAmount: bigint,
    recipient: string,
    zone: string,
    chainId: bigint,
    startTime: bigint,
    endTime: bigint,
    toWithdraw: boolean
  ] & {
    offerer: string;
    inputToken: string;
    inputAmount: bigint;
    outputToken: string;
    outputAmount: bigint;
    recipient: string;
    zone: string;
    chainId: bigint;
    startTime: bigint;
    endTime: bigint;
    toWithdraw: boolean;
  };

  export type MatchingDetailsStruct = {
    tradeId: string;
    makerOrder: IAoriV2.OrderStruct;
    takerOrder: IAoriV2.OrderStruct;
    makerSignature: BytesLike;
    takerSignature: BytesLike;
    feeTag: string;
    feeRecipient: AddressLike;
  };

  export type MatchingDetailsStructOutput = [
    tradeId: string,
    makerOrder: IAoriV2.OrderStructOutput,
    takerOrder: IAoriV2.OrderStructOutput,
    makerSignature: string,
    takerSignature: string,
    feeTag: string,
    feeRecipient: string
  ] & {
    tradeId: string;
    makerOrder: IAoriV2.OrderStructOutput;
    takerOrder: IAoriV2.OrderStructOutput;
    makerSignature: string;
    takerSignature: string;
    feeTag: string;
    feeRecipient: string;
  };
}

export interface AoriV2Interface extends Interface {
  getFunction(
    nameOrSignature:
      | "balanceOf"
      | "deposit"
      | "flashLoan"
      | "getMatchingHash"
      | "getOrderHash"
      | "hasOrderSettled"
      | "settleOrders"
      | "signatureIntoComponents"
      | "withdraw"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "FeeReceived" | "OrdersSettled"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "flashLoan",
    values: [AddressLike, AddressLike, BigNumberish, BytesLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "getMatchingHash",
    values: [IAoriV2.MatchingDetailsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "getOrderHash",
    values: [IAoriV2.OrderStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "hasOrderSettled",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "settleOrders",
    values: [IAoriV2.MatchingDetailsStruct, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "signatureIntoComponents",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [AddressLike, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "flashLoan", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getMatchingHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOrderHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasOrderSettled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "settleOrders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "signatureIntoComponents",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
}

export namespace FeeReceivedEvent {
  export type InputTuple = [
    feeRecipient: AddressLike,
    feeTag: string,
    inputToken: AddressLike,
    inputAmount: BigNumberish,
    outputToken: AddressLike,
    outputAmount: BigNumberish
  ];
  export type OutputTuple = [
    feeRecipient: string,
    feeTag: string,
    inputToken: string,
    inputAmount: bigint,
    outputToken: string,
    outputAmount: bigint
  ];
  export interface OutputObject {
    feeRecipient: string;
    feeTag: string;
    inputToken: string;
    inputAmount: bigint;
    outputToken: string;
    outputAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OrdersSettledEvent {
  export type InputTuple = [
    tradeId: string,
    maker: AddressLike,
    taker: AddressLike,
    matchingHash: BytesLike,
    makerOrderHash: BytesLike,
    takerOrderHash: BytesLike,
    zone: AddressLike,
    chainId: BigNumberish
  ];
  export type OutputTuple = [
    tradeId: string,
    maker: string,
    taker: string,
    matchingHash: string,
    makerOrderHash: string,
    takerOrderHash: string,
    zone: string,
    chainId: bigint
  ];
  export interface OutputObject {
    tradeId: string;
    maker: string;
    taker: string;
    matchingHash: string;
    makerOrderHash: string;
    takerOrderHash: string;
    zone: string;
    chainId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface AoriV2 extends BaseContract {
  connect(runner?: ContractRunner | null): AoriV2;
  waitForDeployment(): Promise<this>;

  interface: AoriV2Interface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  balanceOf: TypedContractMethod<
    [_account: AddressLike, _token: AddressLike],
    [bigint],
    "view"
  >;

  deposit: TypedContractMethod<
    [_account: AddressLike, _token: AddressLike, _amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  flashLoan: TypedContractMethod<
    [
      recipient: AddressLike,
      token: AddressLike,
      amount: BigNumberish,
      userData: BytesLike,
      receiveToken: boolean
    ],
    [void],
    "nonpayable"
  >;

  getMatchingHash: TypedContractMethod<
    [matching: IAoriV2.MatchingDetailsStruct],
    [string],
    "view"
  >;

  getOrderHash: TypedContractMethod<
    [order: IAoriV2.OrderStruct],
    [string],
    "view"
  >;

  hasOrderSettled: TypedContractMethod<
    [orderHash: BytesLike],
    [boolean],
    "view"
  >;

  settleOrders: TypedContractMethod<
    [
      matching: IAoriV2.MatchingDetailsStruct,
      serverSignature: BytesLike,
      hookData: BytesLike
    ],
    [void],
    "payable"
  >;

  signatureIntoComponents: TypedContractMethod<
    [signature: BytesLike],
    [[bigint, string, string] & { v: bigint; r: string; s: string }],
    "view"
  >;

  withdraw: TypedContractMethod<
    [_token: AddressLike, _amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "balanceOf"
  ): TypedContractMethod<
    [_account: AddressLike, _token: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "deposit"
  ): TypedContractMethod<
    [_account: AddressLike, _token: AddressLike, _amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "flashLoan"
  ): TypedContractMethod<
    [
      recipient: AddressLike,
      token: AddressLike,
      amount: BigNumberish,
      userData: BytesLike,
      receiveToken: boolean
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getMatchingHash"
  ): TypedContractMethod<
    [matching: IAoriV2.MatchingDetailsStruct],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "getOrderHash"
  ): TypedContractMethod<[order: IAoriV2.OrderStruct], [string], "view">;
  getFunction(
    nameOrSignature: "hasOrderSettled"
  ): TypedContractMethod<[orderHash: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "settleOrders"
  ): TypedContractMethod<
    [
      matching: IAoriV2.MatchingDetailsStruct,
      serverSignature: BytesLike,
      hookData: BytesLike
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "signatureIntoComponents"
  ): TypedContractMethod<
    [signature: BytesLike],
    [[bigint, string, string] & { v: bigint; r: string; s: string }],
    "view"
  >;
  getFunction(
    nameOrSignature: "withdraw"
  ): TypedContractMethod<
    [_token: AddressLike, _amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "FeeReceived"
  ): TypedContractEvent<
    FeeReceivedEvent.InputTuple,
    FeeReceivedEvent.OutputTuple,
    FeeReceivedEvent.OutputObject
  >;
  getEvent(
    key: "OrdersSettled"
  ): TypedContractEvent<
    OrdersSettledEvent.InputTuple,
    OrdersSettledEvent.OutputTuple,
    OrdersSettledEvent.OutputObject
  >;

  filters: {
    "FeeReceived(address,string,address,uint256,address,uint256)": TypedContractEvent<
      FeeReceivedEvent.InputTuple,
      FeeReceivedEvent.OutputTuple,
      FeeReceivedEvent.OutputObject
    >;
    FeeReceived: TypedContractEvent<
      FeeReceivedEvent.InputTuple,
      FeeReceivedEvent.OutputTuple,
      FeeReceivedEvent.OutputObject
    >;

    "OrdersSettled(string,address,address,bytes32,bytes32,bytes32,address,uint160)": TypedContractEvent<
      OrdersSettledEvent.InputTuple,
      OrdersSettledEvent.OutputTuple,
      OrdersSettledEvent.OutputObject
    >;
    OrdersSettled: TypedContractEvent<
      OrdersSettledEvent.InputTuple,
      OrdersSettledEvent.OutputTuple,
      OrdersSettledEvent.OutputObject
    >;
  };
}
