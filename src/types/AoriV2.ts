/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace IClearing {
  export type OrderStruct = {
    offerer: AddressLike;
    inputToken: AddressLike;
    inputAmount: BigNumberish;
    outputToken: AddressLike;
    outputAmount: BigNumberish;
    recipient: AddressLike;
    zone: AddressLike;
    chainId: BigNumberish;
    startTime: BigNumberish;
    endTime: BigNumberish;
    toWithdraw: boolean;
  };

  export type OrderStructOutput = [
    offerer: string,
    inputToken: string,
    inputAmount: bigint,
    outputToken: string,
    outputAmount: bigint,
    recipient: string,
    zone: string,
    chainId: bigint,
    startTime: bigint,
    endTime: bigint,
    toWithdraw: boolean
  ] & {
    offerer: string;
    inputToken: string;
    inputAmount: bigint;
    outputToken: string;
    outputAmount: bigint;
    recipient: string;
    zone: string;
    chainId: bigint;
    startTime: bigint;
    endTime: bigint;
    toWithdraw: boolean;
  };

  export type SignedOrderStruct = {
    order: IClearing.OrderStruct;
    extraData: BytesLike;
    signature: BytesLike;
  };

  export type SignedOrderStructOutput = [
    order: IClearing.OrderStructOutput,
    extraData: string,
    signature: string
  ] & {
    order: IClearing.OrderStructOutput;
    extraData: string;
    signature: string;
  };
}

export interface AoriV2Interface extends Interface {
  getFunction(
    nameOrSignature:
      | "balanceOf"
      | "cancel"
      | "deposit"
      | "eip712Domain"
      | "escrow"
      | "flash"
      | "getOrderHash"
      | "getSignatureMessage"
      | "hasSettled"
      | "isCancelled"
      | "move"
      | "release"
      | "settle"
      | "verifyOrderSignature"
      | "withdraw"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "Cancelled"
      | "Deposit"
      | "Settled"
      | "Transfer"
      | "Withdraw"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "cancel",
    values: [IClearing.SignedOrderStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [AddressLike, AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "eip712Domain",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "escrow",
    values: [IClearing.SignedOrderStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "flash",
    values: [AddressLike, AddressLike, BigNumberish, BytesLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "getOrderHash",
    values: [IClearing.OrderStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "getSignatureMessage",
    values: [IClearing.SignedOrderStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "hasSettled",
    values: [AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isCancelled",
    values: [AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "move",
    values: [AddressLike, AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "release",
    values: [IClearing.SignedOrderStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "settle",
    values: [IClearing.SignedOrderStruct[], BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "verifyOrderSignature",
    values: [IClearing.SignedOrderStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [AddressLike, AddressLike, BigNumberish, BytesLike]
  ): string;

  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "cancel", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "eip712Domain",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "escrow", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "flash", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getOrderHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSignatureMessage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "hasSettled", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isCancelled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "move", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "release", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "settle", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "verifyOrderSignature",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
}

export namespace CancelledEvent {
  export type InputTuple = [
    orderHash: BytesLike,
    zone: AddressLike,
    offerer: AddressLike,
    order: IClearing.OrderStruct,
    extraData: BytesLike
  ];
  export type OutputTuple = [
    orderHash: string,
    zone: string,
    offerer: string,
    order: IClearing.OrderStructOutput,
    extraData: string
  ];
  export interface OutputObject {
    orderHash: string;
    zone: string;
    offerer: string;
    order: IClearing.OrderStructOutput;
    extraData: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DepositEvent {
  export type InputTuple = [
    from: AddressLike,
    account: AddressLike,
    token: AddressLike,
    amount: BigNumberish,
    extraData: BytesLike
  ];
  export type OutputTuple = [
    from: string,
    account: string,
    token: string,
    amount: bigint,
    extraData: string
  ];
  export interface OutputObject {
    from: string;
    account: string;
    token: string;
    amount: bigint;
    extraData: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SettledEvent {
  export type InputTuple = [
    orderHash: BytesLike,
    zone: AddressLike,
    offerer: AddressLike,
    order: IClearing.OrderStruct,
    extraData: BytesLike
  ];
  export type OutputTuple = [
    orderHash: string,
    zone: string,
    offerer: string,
    order: IClearing.OrderStructOutput,
    extraData: string
  ];
  export interface OutputObject {
    orderHash: string;
    zone: string;
    offerer: string;
    order: IClearing.OrderStructOutput;
    extraData: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransferEvent {
  export type InputTuple = [
    from: AddressLike,
    account: AddressLike,
    token: AddressLike,
    amount: BigNumberish,
    extraData: BytesLike
  ];
  export type OutputTuple = [
    from: string,
    account: string,
    token: string,
    amount: bigint,
    extraData: string
  ];
  export interface OutputObject {
    from: string;
    account: string;
    token: string;
    amount: bigint;
    extraData: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WithdrawEvent {
  export type InputTuple = [
    from: AddressLike,
    account: AddressLike,
    token: AddressLike,
    amount: BigNumberish,
    extraData: BytesLike
  ];
  export type OutputTuple = [
    from: string,
    account: string,
    token: string,
    amount: bigint,
    extraData: string
  ];
  export interface OutputObject {
    from: string;
    account: string;
    token: string;
    amount: bigint;
    extraData: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface AoriV2 extends BaseContract {
  connect(runner?: ContractRunner | null): AoriV2;
  waitForDeployment(): Promise<this>;

  interface: AoriV2Interface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  balanceOf: TypedContractMethod<
    [_account: AddressLike, _token: AddressLike],
    [bigint],
    "view"
  >;

  cancel: TypedContractMethod<
    [signedOrder: IClearing.SignedOrderStruct],
    [void],
    "nonpayable"
  >;

  deposit: TypedContractMethod<
    [
      _account: AddressLike,
      _token: AddressLike,
      _amount: BigNumberish,
      _extraData: BytesLike
    ],
    [void],
    "payable"
  >;

  eip712Domain: TypedContractMethod<
    [],
    [
      [string, string, string, bigint, string, string, bigint[]] & {
        fields: string;
        name: string;
        version: string;
        chainId: bigint;
        verifyingContract: string;
        salt: string;
        extensions: bigint[];
      }
    ],
    "view"
  >;

  escrow: TypedContractMethod<
    [signedOrder: IClearing.SignedOrderStruct],
    [void],
    "nonpayable"
  >;

  flash: TypedContractMethod<
    [
      recipient: AddressLike,
      token: AddressLike,
      amount: BigNumberish,
      userData: BytesLike,
      receiveToken: boolean
    ],
    [void],
    "nonpayable"
  >;

  getOrderHash: TypedContractMethod<
    [order: IClearing.OrderStruct],
    [string],
    "view"
  >;

  getSignatureMessage: TypedContractMethod<
    [signedOrder: IClearing.SignedOrderStruct],
    [string],
    "view"
  >;

  hasSettled: TypedContractMethod<
    [offerer: AddressLike, orderHash: BytesLike],
    [boolean],
    "view"
  >;

  isCancelled: TypedContractMethod<
    [offerer: AddressLike, orderHash: BytesLike],
    [boolean],
    "view"
  >;

  move: TypedContractMethod<
    [
      to: AddressLike,
      token: AddressLike,
      amount: BigNumberish,
      extraData: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  release: TypedContractMethod<
    [signedOrder: IClearing.SignedOrderStruct],
    [void],
    "nonpayable"
  >;

  settle: TypedContractMethod<
    [
      orders: IClearing.SignedOrderStruct[],
      extraData: BytesLike,
      witness: BytesLike
    ],
    [void],
    "payable"
  >;

  verifyOrderSignature: TypedContractMethod<
    [signedOrder: IClearing.SignedOrderStruct],
    [boolean],
    "view"
  >;

  withdraw: TypedContractMethod<
    [
      _to: AddressLike,
      _token: AddressLike,
      _amount: BigNumberish,
      _extraData: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "balanceOf"
  ): TypedContractMethod<
    [_account: AddressLike, _token: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "cancel"
  ): TypedContractMethod<
    [signedOrder: IClearing.SignedOrderStruct],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "deposit"
  ): TypedContractMethod<
    [
      _account: AddressLike,
      _token: AddressLike,
      _amount: BigNumberish,
      _extraData: BytesLike
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "eip712Domain"
  ): TypedContractMethod<
    [],
    [
      [string, string, string, bigint, string, string, bigint[]] & {
        fields: string;
        name: string;
        version: string;
        chainId: bigint;
        verifyingContract: string;
        salt: string;
        extensions: bigint[];
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "escrow"
  ): TypedContractMethod<
    [signedOrder: IClearing.SignedOrderStruct],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "flash"
  ): TypedContractMethod<
    [
      recipient: AddressLike,
      token: AddressLike,
      amount: BigNumberish,
      userData: BytesLike,
      receiveToken: boolean
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getOrderHash"
  ): TypedContractMethod<[order: IClearing.OrderStruct], [string], "view">;
  getFunction(
    nameOrSignature: "getSignatureMessage"
  ): TypedContractMethod<
    [signedOrder: IClearing.SignedOrderStruct],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "hasSettled"
  ): TypedContractMethod<
    [offerer: AddressLike, orderHash: BytesLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "isCancelled"
  ): TypedContractMethod<
    [offerer: AddressLike, orderHash: BytesLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "move"
  ): TypedContractMethod<
    [
      to: AddressLike,
      token: AddressLike,
      amount: BigNumberish,
      extraData: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "release"
  ): TypedContractMethod<
    [signedOrder: IClearing.SignedOrderStruct],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "settle"
  ): TypedContractMethod<
    [
      orders: IClearing.SignedOrderStruct[],
      extraData: BytesLike,
      witness: BytesLike
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "verifyOrderSignature"
  ): TypedContractMethod<
    [signedOrder: IClearing.SignedOrderStruct],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "withdraw"
  ): TypedContractMethod<
    [
      _to: AddressLike,
      _token: AddressLike,
      _amount: BigNumberish,
      _extraData: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "Cancelled"
  ): TypedContractEvent<
    CancelledEvent.InputTuple,
    CancelledEvent.OutputTuple,
    CancelledEvent.OutputObject
  >;
  getEvent(
    key: "Deposit"
  ): TypedContractEvent<
    DepositEvent.InputTuple,
    DepositEvent.OutputTuple,
    DepositEvent.OutputObject
  >;
  getEvent(
    key: "Settled"
  ): TypedContractEvent<
    SettledEvent.InputTuple,
    SettledEvent.OutputTuple,
    SettledEvent.OutputObject
  >;
  getEvent(
    key: "Transfer"
  ): TypedContractEvent<
    TransferEvent.InputTuple,
    TransferEvent.OutputTuple,
    TransferEvent.OutputObject
  >;
  getEvent(
    key: "Withdraw"
  ): TypedContractEvent<
    WithdrawEvent.InputTuple,
    WithdrawEvent.OutputTuple,
    WithdrawEvent.OutputObject
  >;

  filters: {
    "Cancelled(bytes32,address,address,tuple,bytes)": TypedContractEvent<
      CancelledEvent.InputTuple,
      CancelledEvent.OutputTuple,
      CancelledEvent.OutputObject
    >;
    Cancelled: TypedContractEvent<
      CancelledEvent.InputTuple,
      CancelledEvent.OutputTuple,
      CancelledEvent.OutputObject
    >;

    "Deposit(address,address,address,uint256,bytes)": TypedContractEvent<
      DepositEvent.InputTuple,
      DepositEvent.OutputTuple,
      DepositEvent.OutputObject
    >;
    Deposit: TypedContractEvent<
      DepositEvent.InputTuple,
      DepositEvent.OutputTuple,
      DepositEvent.OutputObject
    >;

    "Settled(bytes32,address,address,tuple,bytes)": TypedContractEvent<
      SettledEvent.InputTuple,
      SettledEvent.OutputTuple,
      SettledEvent.OutputObject
    >;
    Settled: TypedContractEvent<
      SettledEvent.InputTuple,
      SettledEvent.OutputTuple,
      SettledEvent.OutputObject
    >;

    "Transfer(address,address,address,uint256,bytes)": TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;
    Transfer: TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;

    "Withdraw(address,address,address,uint256,bytes)": TypedContractEvent<
      WithdrawEvent.InputTuple,
      WithdrawEvent.OutputTuple,
      WithdrawEvent.OutputObject
    >;
    Withdraw: TypedContractEvent<
      WithdrawEvent.InputTuple,
      WithdrawEvent.OutputTuple,
      WithdrawEvent.OutputObject
    >;
  };
}
